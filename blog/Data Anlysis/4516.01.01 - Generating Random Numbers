=== Random Number Generation ===

\define {Method For Generating Points On The Unit Sphere} {
  Want to generate points uniformly distributed on the $n$-dimensional unit sphere. Applications - choose hyperplanes uniformly distributed.
  The problem has been much studied.
  The winner problem (by Muller) is - generate a $n$-vector with components drawn from independent standard normals and normalize it. The result is that the points are uniformly distributed on the $n-1$ dimensional surface of the unit sphere.
  This has to generate more random numbers than other methods, but it is intuitive and relatively cheap to use on modern computers.
}

* Sampling from a discrete distribution:
  * Problem: we want to sample from a given discrete probability distribution $p$ on $\hcrange{1}{n}$ defined by $p_1, p_2, \dots, p_i$ (with $p_i \geq 0$ and $\sum_{i=1}^n p_i = 1$).
  * Assumptions:
    * Our computing model works with real-number words of finite precision (IEEE-754 doubles).
    * We can add, substract, multiply, divide and compare the real-number words we work with in constant time. 
    * We can generate a uniform random number in the interval $[0,1)$ in constant time.
    * We can compute the integer floor of a real number in constant time (!!!does not generalizez for arbitrary real-numbers!!!).
    * We measure space complexity for everything we use above the space required to hold $p$.
  * Algorithm (1) for sampling from a uniform distribution (simple case of previous problem):
    * Take the interval $[0,1)$ and divide it into $n$ equal buckets. Generate a random number $x$ in $[0,1)$ uniformly. The bucket in which the number fell is our sampled number.
    * We want to return the number $i$ such that $i/n \leq x$ but $(i+1)/n > n$. This means that $i \leq nx$ and furthermore $i = \floor{nx}$.
    * Actual implementation is (1) $x \leftarrow \text{rand01}()$ and (2) $return \floor{nx}$. 
    * No setup time or space complexity. Sampling time complexity $\Theta(1)$ and space complexity $\Theta(1)$.
  * Algorithm (2) for sampling from a distribution where $p_i$ are rational ($p_i = r_i / q_i$):
    * Compute the LCM of $p_i$ ($L$) and divide the interval $[0,1)$ into $L$ equal buckets. Each bucket is assigned to one number. We then use the first algorithm to generate an integer in $\hcrange{1}{L}$ and return the number from $\hcrange{1}{n}$ assigned to that bucket.
    * We need to build an array $A$ of size $L$ which holds for element $i$ the number in $\hcrange{1}{n}$ to which the respective bucket is associated. The first $p_i L = r_i L / q_i$ buckets (an integer) are assigned $1$ etc.
    * Actual implementation is (1) $i \leftarrow \text{first_algorithm}(L)$ and (2) $\text{return} A[i]$.
    * Worst case bounds for $L$ are $O(\sum_{i=1}^n q_i)$ - this can get pretty huge in bad cases therefore the method is not good for most situations - only when we know $p$ in advance.
    * Setup time/space is $O(n)$ in best case (uniform) and $O(\sum_{i=1}^n q_i)$ in worst case. Sampling time/space complexity is $\Theta(1)$.
  * Algorithm (3) for sampling when $n=2$ (biased coin case):
    * Take the interval $[0,1)$ and divide it into $[0,p_1)$ and $[p_1,1)$. Generate a random number $x$ in $[0,1)$ uniformely. If the number is smaller than $p_1$ return $1$ else return $2$.
    * Actual implementation is (1) $x \leftarrow \text{rand01}()$ and (2) $\text{return} x < p_1$.
    * No setup time or space complexity. Sampling time/space complexity is $\Theta(1)$.

=== The Nature Of Randomness ===

define {The Nature of Randomness} {
* Understanding what is meant by "random" insofar as randomness is needed in your application is critical to correctly figuring out what kind of pseudorandom number generator you need. All pseudorandom number generators are deterministic, so it is possible to predict all future outputs of a PRNG. In the literature, there are at least 4 different notions of randomness: statistical, cryptographic, algorithmic, and physical. The first two are important for practical applications. The third, also known as Chaitin-Kolmogorov randomness, is mostly of theoretical interest. The last, of course, is not pseudorandomness but true randomness.
  * Statistical Randomness: A pseudorandom number generator is said to be statistically random if its output passes any statistical test. Such generators may be safely used in simulations, Monte Carlo experiments, etc, since they will not skew the results of the experiment.
  * Cryptographic Randomness: A pseudorandom number generator is said to be cryptographically secure if, by observing a polynomial-sized number of outputs, no polynomial-time predicate of the next output can be predicted with noticeably greater than random chance. If the generator outputs one bit at a time, this means that after observing the generator's output, no efficient algorithm exists to predict the value of the next output bit with success probability greater than 1/2 plus epsilon. Here "polynomial-sized" and "efficient" is relative to the size of the initial seed. This is an informal statement of Yao's next bit test. The definition involves polynomial-time computable predicates because otherwise a generator that outputs a 32-bit word at a time may output values that are unpredictable as a whole, but, for example, the low-order bit might be easily determined. Such generators may be safely used in any adversarial context, including cryptographic key / nonce generation.
  * Chaitin-Kolmogorov Randomness: Chaitin and Kolmogorov independently came up with this characterization, also called algorithmic randomness, of random strings. It captures intuition that most people have about randomness: the bit string "0000000000000000" is often considered less random than "0100101001011101", despite the fact that both may have been the output of the same pseudorandom number generator or even the output of a source of physical randomness. Indeed, a physically random source such as a fair coin flipped 16 times would output both strings with equal probability. The algorithmic randomness of a string is the length of the shortest program which would output the string. It doesn't matter what programming language the definition is relative to, since for sufficiently long strings it doesn't matter: the difference is a "small" constant, since one could prefix the program in language B with an interpreter for language B written in language A.
  * Physical Randomness: Many sources of "physical randomness" is random only relative to the available computation power. For example, if we were to flip a fair coin to obtain a random bit, an adversary who can train a high frame rate camera or similar sensor on the coin as it flew through the air and has enough computational power to analyze, in real time, the physics of the coin and its interactions with the hand that is about to catch it is likely to be able to predict the coin toss with greater than 1/2 + epsilon probability of success. Other sources make use of quantum mechanical uncertainty. An often used example involves measuring the junction noise of a reverse-biased zener diode (due to quantum mechanical tunneling).
}

